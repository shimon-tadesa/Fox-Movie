{"version":3,"sources":["../node_modules/express/lib sync","Home.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Home","props","clickForSearch","ItemSearch","axios","post","data","movies","console","log","state","moviesTop","isLoaded","moviesPopular","tvShowsTop","item","tvShowsPopular","get","response","moviesData","NewStateUpdate","this","setState","allmovies","map","movie","index","key","title","overview","vote_average","style","width","height","borderRadius","src","poster_path","className","type","onChange","event","target","value","onClick","Component","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,0QCkFVC,G,mBAlFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAyCNC,eAAiB,WACb,IACMC,EADYC,IAAMC,KAAK,gCACDC,KAAKC,OACjCC,QAAQC,IAAIN,IA3ChB,EAAKO,MAAQ,CACTC,UAAW,GACXC,UAAU,EACVC,cAAe,GACfC,WAAY,GACZC,KAAO,GACPC,eAAgB,IARL,E,uLAyBQZ,IAAMa,IAAI,+B,OAA3BC,E,OACAC,EAAaD,EAASZ,KAAKC,OACjCC,QAAQC,IAAIU,GAENC,EAAiB,CACnBT,UAAWQ,EACXP,UAAU,EACVC,cAAe,GACfC,WAAY,GACZC,KAAO,GACPC,eAAgB,IAEpBK,KAAKC,SAASF,G,gFAiBR,IAAD,OAECG,EAAYF,KAAKX,MAAMC,UAAUa,KAAI,SAACC,EAAOC,GAAR,OACvC,6BACI,wBAAIC,IAAKD,GAAQD,EAAMG,OACvB,2BAAIH,EAAMI,UACV,2BAAIJ,EAAMK,cACV,yBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAAQC,aAAc,OAASC,IAAG,UAjErE,kCAiEqE,YAAmBV,EAAMW,mBAIzG,OACI,yBAAKC,UAAU,QACX,qDAEA,2BAAOC,KAAK,UACZC,SAAU,SAAAC,GAAK,OAAI,EAAKzB,KAAOyB,EAAMC,OAAOC,SAE5C,4BAAQC,QAAStB,KAAKnB,gBAAtB,UAGKqB,O,GA7EFqB,cC4BJC,E,iLAxBX,OACE,kBAAC,IAAD,KACE,yBAAKR,UAAU,OACP,yBAAKA,UAAU,YAEZ,kBAAC,IAAD,CAAMS,GAAG,KAAT,QACD,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAIR,kBAAC,IAAD,KACE,kBAAE,IAAF,CAAQC,OAAK,EAACC,KAAK,IAAIC,UAAWjD,W,GAhB5B4C,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f9b3af18.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 278;","import React, { Component } from 'react';\r\nimport axios from '../../server/node_modules/axios';\r\nimport { response } from 'express';\r\n\r\nconst baseImgUrl = 'https://image.tmdb.org/t/p/w500';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            moviesTop: [],\r\n            isLoaded: false,\r\n            moviesPopular: [],\r\n            tvShowsTop: [],\r\n            item : \"\",\r\n            tvShowsPopular: []\r\n        }\r\n    }\r\n\r\n   \r\n\r\n     //     const movie = {\r\n        //         title:\"\",\r\n        //    \"poster_path\":,\r\n        //         overview:\"\",\r\n        //         vote_average:\"\"\r\n        //        \r\n        //     }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await axios.get(\"http://localhost:8080/home\");\r\n        const moviesData = response.data.movies;\r\n        console.log(moviesData);\r\n\r\n        const NewStateUpdate = {\r\n            moviesTop: moviesData,\r\n            isLoaded: true,\r\n            moviesPopular: [],\r\n            tvShowsTop: [],\r\n            item : \"\",\r\n            tvShowsPopular: []\r\n        };\r\n        this.setState(NewStateUpdate);\r\n        \r\n        \r\n        \r\n    }\r\n        clickForSearch = ()=>{\r\n            const response =  axios.post(\"http://localhost:8080/search\");\r\n            const ItemSearch = response.data.movies;\r\n            console.log(ItemSearch);\r\n        }\r\n          \r\n          \r\n          \r\n          \r\n     \r\n      \r\n\r\n    render() {\r\n\r\n        const allmovies = this.state.moviesTop.map((movie, index) =>\r\n            <div>\r\n                <h4 key={index}>{movie.title}</h4>\r\n                <p>{movie.overview}</p>\r\n                <p>{movie.vote_average}</p>\r\n                <img style={{ width: '400px', height: '200px',borderRadius: '5px' }} src={`${baseImgUrl}/${movie.poster_path}`} />\r\n\r\n            </div>)\r\n\r\n        return (\r\n            <div className='Home'>\r\n                <h1>Welcome To Foxx Movie</h1>\r\n\r\n                <input type=\"require\" \r\n                onChange={event => this.item = event.target.value}></input>\r\n\r\n                <button onClick={this.clickForSearch}>Search</button>\r\n\r\n                \r\n                    {allmovies}\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\nimport './App.css';\n// import Login from './Login';\nimport Home from './Home';\n\nclass App extends Component {\n  \n  render() {\n\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n                <div className=\"LinkHead\">\n\n                   <Link to='/'>Home</Link>\n                  <Link to='/Login'>Login</Link>\n                  <Link to='/Registr'>Registr</Link>\n\n                 </div>\n\n          <Switch>\n            < Route exact path='/' component={Home} />\n            \n\n\n\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}