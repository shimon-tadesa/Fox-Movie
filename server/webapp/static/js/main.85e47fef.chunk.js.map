{"version":3,"sources":["components/Login.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["Login","email","password","className","type","required","placeholder","Component","Home","props","handleSubmit","fetch","state","searchTerm","then","data","json","console","log","setState","movies","results","handleChange","e","target","value","moviesTop","isLoaded","moviesPopular","tvShowsTop","tvShowsPopular","axios","get","response","moviesData","ntate","this","allmovies","map","movie","index","key","title","overview","vote_average","style","width","height","borderRadius","src","poster_path","action","onSubmit","onChange","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAiBeA,G,iNAdXC,MAAQ,G,EACRC,SAAY,G,wEAGR,OACI,yBAAKC,UAAU,cACX,0CACA,2BAAOC,KAAK,QAAQC,SAAS,WAAWC,YAAY,UACpD,2BAAOF,KAAK,WAAWC,SAAS,WAAWC,YAAY,kB,GATnDC,c,0CCqFLC,E,YA/EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAoCVC,aAAe,WAEXC,MAAM,qDAAD,OA1CD,mCA0CC,kBAAqE,EAAKC,MAAMC,aAChFC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACFE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAAEC,OAAO,YAAKL,EAAKM,eA3C1B,EA+CnBC,aAAe,SAACC,GACZ,EAAKJ,SAAS,CAACN,WAAYU,EAAEC,OAAOC,SA9CpC,EAAKb,MAAQ,CACTc,UAAW,GACXN,OAAQ,GACRO,UAAU,EACVC,cAAe,GACfC,WAAY,GACZhB,WAAY,GACZiB,eAAgB,IAIpBb,QAAQC,IAAI,eAbG,E,uLAmBQa,IAAMC,IAAI,+B,OAA3BC,E,OACAC,EAAaD,EAASlB,KAAKK,OACjCH,QAAQC,IAAIgB,GACZjB,QAAQC,IAAI,qBAENiB,EAAQ,CACVT,UAAWQ,EACXd,OAAQ,GACRO,UAAU,EACVC,cAAe,GACfC,WAAY,GACZhB,WAAY,GACZiB,eAAgB,IAEpBM,KAAKjB,SAASgB,G,gFAuBd,IAAME,EAAYD,KAAKxB,MAAMc,UAAUY,KAAI,SAACC,EAAOC,GAAR,OACvC,6BACI,wBAAIC,IAAKD,GAAQD,EAAMG,OACvB,2BAAIH,EAAMI,UACV,2BAAIJ,EAAMK,cACV,yBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,aAAc,OAASC,IAAG,UAjEtE,kCAiEsE,YAAmBV,EAAMW,eACjGjC,QAAQC,IAAI,UALjB,QASJ,OACI,yBAAKf,UAAU,QACX,qDACA,0BAAMgD,OAAO,GAAGC,SAAUhB,KAAK1B,cAC3B,2BAAON,KAAK,OAAOE,YAAY,eAAe+C,SAAUjB,KAAKd,gBAGhEe,O,GA3EE9B,aCmCJ+C,E,iLA9BX,OACE,kBAAC,IAAD,KACE,yBAAKnD,UAAU,OACP,yBAAKA,UAAU,YAEZ,kBAAC,IAAD,CAAMoD,GAAG,KAAT,QACD,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WACA,kBAAC,IAAD,CAAMA,GAAG,wBAAT,YAIR,kBAAC,IAAD,KACE,kBAAE,IAAF,CAAQC,OAAK,EAACC,KAAK,IAAIC,UAAWlD,IAClC,kBAAE,IAAF,CAAQgD,OAAK,EAACC,KAAK,SAASC,UAAW1D,W,GAlBjCO,aCKEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAAAyD,GACjCA,EAAaC,kB","file":"static/js/main.85e47fef.chunk.js","sourcesContent":["import React,{Component}from 'react';\r\n\r\nclass Login extends Component{\r\n    email = \"\";\r\n    password  = \"\";\r\n\r\n    render(){\r\n        return(\r\n            <div className='Login-User'>\r\n                <h1>Login Page</h1>\r\n                <input type='email' required='required' placeholder='email'></input>\r\n                <input type=\"password\" required='required' placeholder='password'></input>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport axios from '../../../server/node_modules/axios';\r\n\r\n\r\nconst baseImgUrl = 'https://image.tmdb.org/t/p/w500';\r\nlet myKey = 'd759a614b16c0c1c0295b4313e94aeec';\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            moviesTop: [],\r\n            movies: [],\r\n            isLoaded: false,\r\n            moviesPopular: [],\r\n            tvShowsTop: [],\r\n            searchTerm: '',\r\n            tvShowsPopular: []\r\n\r\n\r\n        }\r\n        console.log(\"constructor\");\r\n    }\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        const response = await axios.get(\"http://localhost:8080/home\");\r\n        const moviesData = response.data.movies;\r\n        console.log(moviesData);\r\n        console.log(\"componentDidMount\");\r\n\r\n        const ntate = {\r\n            moviesTop: moviesData,\r\n            movies: [],\r\n            isLoaded: true,\r\n            moviesPopular: [],\r\n            tvShowsTop: [],\r\n            searchTerm: '',\r\n            tvShowsPopular: []\r\n        };\r\n        this.setState(ntate);\r\n    }\r\n\r\n\r\n    handleSubmit = () => {\r\n       \r\n        fetch(`https://api.themoviedb.org/3/search/movie?api_key=${myKey}&query=${this.state.searchTerm}`)\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({ movies: [...data.results] })\r\n            })\r\n    }\r\n\r\n    handleChange = (e)=>{\r\n        this.setState({searchTerm: e.target.value})\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const allmovies = this.state.moviesTop.map((movie, index) =>\r\n            <div>\r\n                <h4 key={index}>{movie.title}</h4>\r\n                <p>{movie.overview}</p>\r\n                <p>{movie.vote_average}</p>\r\n                <img style={{ width: '400px', height: '200px', borderRadius: '5px' }} src={`${baseImgUrl}/${movie.poster_path}`} />\r\n                {console.log(\"render\")}\r\n                }\r\n            </div>)\r\n\r\n        return (\r\n            <div className='Home'>\r\n                <h1>Welcome To Foxx Movie</h1>\r\n                <form action=\"\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" placeholder=\"search movie\" onChange={this.handleChange}></input>\r\n                </form>\r\n                {/* <button>Search</button> */}\r\n                {allmovies}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\nimport '../App.css';\nimport Login from './Login';\n// import SearchArea from './search_Item_results';\nimport Home from './Home';\n\nclass App extends Component {\n  \n  render() {\n\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n                <div className=\"LinkHead\">\n\n                   <Link to='/'>Home</Link>\n                  <Link to='/Login'>Login</Link>\n                  <Link to='/Registr'>Registr</Link>\n                  <Link to='/search_item_results'>Results</Link>\n\n                 </div>\n\n          <Switch>\n            < Route exact path='/' component={Home} />\n            < Route exact path='/Login' component={Login} />\n           \n          \n\n            \n            \n\n\n\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}